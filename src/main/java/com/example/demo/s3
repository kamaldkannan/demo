import org.apache.commons.vfs2.*;
import org.apache.commons.vfs2.provider.sftp.SftpFileSystemConfigBuilder;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

@Component
@EnableScheduling
public class SftpScheduledExample {

    private BlockingQueue<FileObject> downloadQueue = new LinkedBlockingQueue<>();
    private BlockingQueue<FileObject> uploadQueue = new LinkedBlockingQueue<>();

    public SftpScheduledExample() {
        startDownloadWorker();
        startUploadWorker();
    }

   public static void main(String[] args) {
        String sftpUrl = "sftp://username:password@hostname/directory/";
        String localDirectoryPath = "/path/to/local/directory";

        try (FileSystemManager fsManager = VFS.getManager()) {
            FileObject remoteDir = fsManager.resolveFile(sftpUrl);

            if (remoteDir.exists() && remoteDir.getType() == FileType.FOLDER) {
                FileObject[] files = remoteDir.getChildren();
                for (FileObject file : files) {
                    System.out.println("File: " + file.getName().getBaseName());
                    downloadFile(file, localDirectoryPath);
                }
            }
        } catch (FileSystemException e) {
            e.printStackTrace();
        }
    }

    private static void downloadFile(FileObject remoteFile, String localDirectoryPath) {
        try {
            FileObject localDir = VFS.getManager().resolveFile("file://" + localDirectoryPath);
            FileObject localFile = localDir.resolveFile(remoteFile.getName().getBaseName());
            FileUtil.copyContent(remoteFile, localFile);
        } catch (FileSystemException e) {
            e.printStackTrace();
        }
    }
 private FileSystemOptions createDefaultOptions() throws FileSystemException {
        FileSystemOptions opts = new FileSystemOptions();
        SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(opts, "no");
        SftpFileSystemConfigBuilder.getInstance().setUserDirIsRoot(opts, false);
        SftpFileSystemConfigBuilder.getInstance().setIdentities(opts, new File[]{new File(privateKeyFilePath)});
        return opts;
    }
    private void startDownloadWorker() {
        new Thread(() -> {
            while (true) {
                try {
                    FileObject file = downloadQueue.take();
                    downloadFile(file);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }).start();
    }

    private void startUploadWorker() {
        new Thread(() -> {
            while (true) {
                try {
                    FileObject file = uploadQueue.take();
                    uploadFile(file);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }).start();
    }

    @Scheduled(fixedRate = 60000) // Run every 1 minute (60000 milliseconds)
    public void performSftpOperation() {
        String sftpUrl = "sftp://username:password@hostname/directory/";

        try (FileSystemManager fsManager = VFS.getManager()) {
            FileObject remoteDir = fsManager.resolveFile(sftpUrl);

            if (remoteDir.exists() && remoteDir.getType() == FileType.FOLDER) {
                FileObject[] files = remoteDir.getChildren();
                for (FileObject file : files) {
                    System.out.println("File: " + file.getName().getBaseName());
                    downloadQueue.offer(file);
                    uploadQueue.offer(file);
                }
            }
        } catch (FileSystemException e) {
            e.printStackTrace();
        }
    }

    private void downloadFile(FileObject remoteFile) {
        // Implement download logic
    }

    private void uploadFile(FileObject localFile) {
        // Implement upload logic
    }
}



import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.jcraft.jsch.*;

import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.io.File;
import java.util.Vector;
import java.util.concurrent.*;

import com.jcraft.jsch.Logger;

public class MyLogger implements Logger {
    static java.util.Hashtable name=new java.util.Hashtable();
    static{
        name.put(new Integer(DEBUG), "DEBUG: ");
        name.put(new Integer(INFO), "INFO: ");
        name.put(new Integer(WARN), "WARN: ");
        name.put(new Integer(ERROR), "ERROR: ");
        name.put(new Integer(FATAL), "FATAL: ");
    }
    public boolean isEnabled(int level){
        return true;
    }
    public void log(int level, String message){
        System.err.print(name.get(new Integer(level)));
        System.err.println(message);
    }
}


@Component
@EnableScheduling
public class SftpAndS3ScheduledTask {
    private static final String HOST = "hostname";
    private static final String USER = "username";
    private static final String PASSWORD = "password";
    private static final int PORT = 22;
    private static final int MAX_RETRIES = 3;

    private static final String BUCKET_NAME = "your-s3-bucket-name";
    private static final String S3_PREFIX = "s3-folder-prefix/";

    private BlockingQueue<File> fileQueue = new LinkedBlockingQueue<>();
    private ExecutorService executorService = Executors.newFixedThreadPool(5); // Use a fixed number of threads

    @Scheduled(fixedRate = 60000) // Run every 1 minute (60000 milliseconds)
    public void downloadFromSftp() {
        JSch jsch = new JSch();
        Session session = null;
        ChannelSftp sftpChannel = null;

        try {
            session = jsch.getSession(USER, HOST, PORT);
            session.setConfig("StrictHostKeyChecking", "no");
            session.setPassword(PASSWORD);
            session.connect();

            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();

            String remoteDir = "/path/to/directory/";
            sftpChannel.cd(remoteDir);

            // List all files in the directory
            Vector<ChannelSftp.LsEntry> files = sftpChannel.ls("*");
            for (ChannelSftp.LsEntry file : files) {
                if (file.getAttrs().isDir()) {
                    continue; // Skip directories
                }
                String fileName = file.getFilename();
                System.out.println("Downloading file: " + fileName);

                // Download the file
                int retries = 0;
                boolean success = false;
                while (!success && retries < MAX_RETRIES) {
                    try {
                        File localFile = File.createTempFile("temp-", ".tmp");
                        sftpChannel.get(fileName, localFile.getAbsolutePath());
                        fileQueue.put(localFile);
                        success = true;
                    } catch (Exception e) {
                        retries++;
                        System.out.println("Failed to download file: " + fileName + ". Retrying...");
                        Thread.sleep(1000); // Wait before retrying
                    }
                }

                if (!success) {
                    System.out.println("Failed to download file: " + fileName + " after " + MAX_RETRIES + " retries.");
                }
            }

        } catch (JSchException | SftpException | InterruptedException e) {
            e.printStackTrace();
        } finally {
            if (sftpChannel != null) {
                sftpChannel.exit();
            }
            if (session != null) {
                session.disconnect();
            }
        }
    }

    @Scheduled(fixedRate = 60000) // Run every 1 minute (60000 milliseconds)
    public void uploadToS3() {
        AmazonS3 s3Client = AmazonS3ClientBuilder.defaultClient();

        while (!fileQueue.isEmpty()) {
            try {
                File file = fileQueue.take();
                String key = S3_PREFIX + file.getName();
                System.out.println("Adding file to upload queue: " + key);

                executorService.submit(() -> {
                    try {
                        System.out.println("Uploading file to S3: " + key);
                        s3Client.putObject(new PutObjectRequest(BUCKET_NAME, key, file));
                        file.delete(); // Delete the local file after upload
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                });
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
